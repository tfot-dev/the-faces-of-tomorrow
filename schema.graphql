schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

type auth0_profile {
  email: String
  id: String
  picture: String
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

type Email {
  folderId: String!
  fromAddress: String!
  messageId: String!
  receivedTime: String!
  sender: String!
  sentDateInGMT: String!
  subject: String!
  summary: String!
  toAddress: String!
}

scalar json

# expression to compare columns of type json. All fields are combined with logical 'AND'.
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

type Mutation {
  deleteEmail(folderId: String!, messageId: String!): [Email]
  sendEmail(message: String!, subject: String!, toAddress: String!): [Email]
}

# mutation root
type mutation_root {
  deleteEmail(folderId: String!, messageId: String!): [Email]

  # delete data from the table: "online_users"
  delete_online_users(
    # filter the rows which have to be deleted
    where: online_users_bool_exp!
  ): online_users_mutation_response

  # delete data from the table: "users"
  delete_users(
    # filter the rows which have to be deleted
    where: users_bool_exp!
  ): users_mutation_response

  # delete single row from the table: "users"
  delete_users_by_pk(auth0_id: String!): users

  # insert data into the table: "online_users"
  insert_online_users(
    # the rows to be inserted
    objects: [online_users_insert_input!]!
  ): online_users_mutation_response

  # insert a single row into the table: "online_users"
  insert_online_users_one(
    # the row to be inserted
    object: online_users_insert_input!
  ): online_users

  # insert data into the table: "users"
  insert_users(
    # the rows to be inserted
    objects: [users_insert_input!]!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users_mutation_response

  # insert a single row into the table: "users"
  insert_users_one(
    # the row to be inserted
    object: users_insert_input!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users
  sendEmail(message: String!, subject: String!, toAddress: String!): [Email]

  # update data of the table: "online_users"
  update_online_users(
    # sets the columns of the filtered rows to the given values
    _set: online_users_set_input

    # filter the rows which have to be updated
    where: online_users_bool_exp!
  ): online_users_mutation_response

  # update data of the table: "users"
  update_users(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input

    # filter the rows which have to be updated
    where: users_bool_exp!
  ): users_mutation_response

  # update single row of the table: "users"
  update_users_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

# columns and relationships of "online_users"
type online_users {
  last_seen: timestamptz
  name: String
}

# aggregated selection of "online_users"
type online_users_aggregate {
  aggregate: online_users_aggregate_fields
  nodes: [online_users!]!
}

# aggregate fields of "online_users"
type online_users_aggregate_fields {
  count(columns: [online_users_select_column!], distinct: Boolean): Int
  max: online_users_max_fields
  min: online_users_min_fields
}

# order by aggregate values of table "online_users"
input online_users_aggregate_order_by {
  count: order_by
  max: online_users_max_order_by
  min: online_users_min_order_by
}

# input type for inserting array relation for remote table "online_users"
input online_users_arr_rel_insert_input {
  data: [online_users_insert_input!]!
}

# Boolean expression to filter rows from the table "online_users". All fields are combined with a logical 'AND'.
input online_users_bool_exp {
  _and: [online_users_bool_exp]
  _not: online_users_bool_exp
  _or: [online_users_bool_exp]
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
}

# input type for inserting data into table "online_users"
input online_users_insert_input {
  last_seen: timestamptz
  name: String
}

# aggregate max on columns
type online_users_max_fields {
  last_seen: timestamptz
  name: String
}

# order by max() on columns of table "online_users"
input online_users_max_order_by {
  last_seen: order_by
  name: order_by
}

# aggregate min on columns
type online_users_min_fields {
  last_seen: timestamptz
  name: String
}

# order by min() on columns of table "online_users"
input online_users_min_order_by {
  last_seen: order_by
  name: order_by
}

# response of any mutation on the table "online_users"
type online_users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [online_users!]!
}

# input type for inserting object relation for remote table "online_users"
input online_users_obj_rel_insert_input {
  data: online_users_insert_input!
}

# ordering options when selecting data from "online_users"
input online_users_order_by {
  last_seen: order_by
  name: order_by
}

# select columns of table "online_users"
enum online_users_select_column {
  # column name
  last_seen

  # column name
  name
}

# input type for updating data in table "online_users"
input online_users_set_input {
  last_seen: timestamptz
  name: String
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

type Post {
  caption: String!
  id: String!
  mediaUrl: String!
  timestamp: String!
}

type Query {
  emails: [Email]!
  posts: [Post]!
}

# query root
type query_root {
  # perform the action: "auth0"
  auth0: auth0_profile
  emails: [Email]!

  # fetch data from the table: "online_users"
  online_users(
    # distinct select on columns
    distinct_on: [online_users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [online_users_order_by!]

    # filter the rows returned
    where: online_users_bool_exp
  ): [online_users!]!

  # fetch aggregated fields from the table: "online_users"
  online_users_aggregate(
    # distinct select on columns
    distinct_on: [online_users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [online_users_order_by!]

    # filter the rows returned
    where: online_users_bool_exp
  ): online_users_aggregate!
  posts: [Post]!

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(auth0_id: String!): users
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # perform the action: "auth0"
  auth0: auth0_profile

  # fetch data from the table: "online_users"
  online_users(
    # distinct select on columns
    distinct_on: [online_users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [online_users_order_by!]

    # filter the rows returned
    where: online_users_bool_exp
  ): [online_users!]!

  # fetch aggregated fields from the table: "online_users"
  online_users_aggregate(
    # distinct select on columns
    distinct_on: [online_users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [online_users_order_by!]

    # filter the rows returned
    where: online_users_bool_exp
  ): online_users_aggregate!

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(auth0_id: String!): users
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# The `Upload` scalar type represents a file upload.
scalar Upload

# columns and relationships of "users"
type users {
  admin: Boolean
  auth0_id: String!
  created_at: timestamptz!
  email_id: String!
  id: String!
  last_seen: timestamptz
  name: String!
}

# aggregated selection of "users"
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

# aggregate fields of "users"
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

# order by aggregate values of table "users"
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

# input type for inserting array relation for remote table "users"
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

# Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  admin: Boolean_comparison_exp
  auth0_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  email_id: String_comparison_exp
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "users"
enum users_constraint {
  # unique or primary key constraint
  users_email_id_key

  # unique or primary key constraint
  users_pkey
}

# input type for inserting data into table "users"
input users_insert_input {
  admin: Boolean
  auth0_id: String
  created_at: timestamptz
  email_id: String
  id: String
  last_seen: timestamptz
  name: String
}

# aggregate max on columns
type users_max_fields {
  auth0_id: String
  created_at: timestamptz
  email_id: String
  id: String
  last_seen: timestamptz
  name: String
}

# order by max() on columns of table "users"
input users_max_order_by {
  auth0_id: order_by
  created_at: order_by
  email_id: order_by
  id: order_by
  last_seen: order_by
  name: order_by
}

# aggregate min on columns
type users_min_fields {
  auth0_id: String
  created_at: timestamptz
  email_id: String
  id: String
  last_seen: timestamptz
  name: String
}

# order by min() on columns of table "users"
input users_min_order_by {
  auth0_id: order_by
  created_at: order_by
  email_id: order_by
  id: order_by
  last_seen: order_by
  name: order_by
}

# response of any mutation on the table "users"
type users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [users!]!
}

# input type for inserting object relation for remote table "users"
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

# on conflict condition type for table "users"
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

# ordering options when selecting data from "users"
input users_order_by {
  admin: order_by
  auth0_id: order_by
  created_at: order_by
  email_id: order_by
  id: order_by
  last_seen: order_by
  name: order_by
}

# primary key columns input for table: "users"
input users_pk_columns_input {
  auth0_id: String!
}

# select columns of table "users"
enum users_select_column {
  # column name
  admin

  # column name
  auth0_id

  # column name
  created_at

  # column name
  email_id

  # column name
  id

  # column name
  last_seen

  # column name
  name
}

# input type for updating data in table "users"
input users_set_input {
  admin: Boolean
  auth0_id: String
  created_at: timestamptz
  email_id: String
  id: String
  last_seen: timestamptz
  name: String
}

# update columns of table "users"
enum users_update_column {
  # column name
  admin

  # column name
  auth0_id

  # column name
  created_at

  # column name
  email_id

  # column name
  id

  # column name
  last_seen

  # column name
  name
}

scalar uuid

